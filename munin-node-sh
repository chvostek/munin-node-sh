#!/usr/local/bin/bash
#!/bin/sh

config_df() {
  cat <<-EOT
    graph_title Filesystem usage in percent
    graph_args --upper-limit 100 -l 0
    graph_vlabel %
    graph_category disk
    graph_scale no
    graph_info This graph shows disk usage on the machine.
EOT
  df -l | sed 1d | while read fs size used avail cap mountpoint; do
    cat <<-EOT
      ${fs}.label $fs
      ${fs}.info $fs
      ${fs}.warning ${df_warning:-92}
      ${fs}.critical ${df_critical:-98}
EOT
  done
}
fetch_df() {
  df -l | while read fs size used avail cap mountpoint; do
    case "$cap" in
      *%) echo "${fs}.value ${cap%%%}" ;;
    esac
  done
}

config_zfslist() {
  cat <<-EOT
    graph_title ZFS dataset usage in percent
    graph_args --upper-limit 100 -l 0
    graph_vlabel %
    graph_category disk
    graph_scale no
    graph_info This graph shows dataset usage on the machine.
EOT
  zfs list -H -o space,quota,refquota,reserv,refreserv \
  | while IFS='\t' read name avail used usedsnap usedds usedrefreserv usedchild quota refquota reserv refreserv; do
    cat <<-EOT
      ${name}.label $name
      ${name}.info $name
      ${name}.warning ${zfslist_warning:-92}
      ${name}.critical ${zfslist_critical:-98}
EOT
  done
}
fetch_zfslist() {
  #for pool in $(/sbin/zpool list -Hp); do
  zfs list -H -o space,quota,refquota,reserv,refreserv \
  | while IFS=$'\t' read name avail used usedsnap usedds usedrefreserv usedchild quota refquota reserv refreserv; do
    case "$refquota" in
      none) ;;
      *) quota="$refquota" ;;
    esac
    if [ "$quota" = none ]; then
      max="$quota"
    else
      max="$(/sbin/zpool list -Hp ${name%%/*}...)"
    fi
    echo "${name}.value $cap"
  done
}

config_cpu() {
  echo ""
}
fetch_cpu() {
  echo ""
}
config_if_() {
  echo ""
}
fetch_if_() {
  echo ""
}
config_if_err_() {
  echo ""
}
fetch_if_err_() {
  echo ""
}
config_load() {
  echo ""
}
fetch_load() {
  echo ""
}
config_memory() {
  echo ""
}
fetch_memory() {
  echo ""
}
config_swap() {
  echo ""
}
fetch_swap() {
  echo ""
}
config_processes() {
  echo ""
}
fetch_processes() {
  echo ""
}
config_netstat() {
  echo ""
}
fetch_netstat() {
  echo ""
}
config_uptime() {
  echo ""
}
fetch_uptime() {
  echo ""
}


echo "# munin node at `hostname`"

# Defaults
plugins="/usr/local/etc/munin/plugins/"
version="unknown"

# TODO: Find our config file and slurp it in

unset MUNIN_CAP_MULTIGRAPH MUNIN_CAP_DIRTYCONFIG

while read command arg; do
  command="${command%}"; arg="${arg%}"
  logger "command=$command arg=$arg"
  case "$command" in
    cap.*multigraph)  MUNIN_CAP_MULTIGRAPH=1 ;&
    cap.*dirtyconfig) MUNIN_CAP_DIRTYCONFIG=1 ;&
    cap*)
      echo "${MUNIN_CAP_MULTIGRAPH:+multigraph} ${MUNIN_CAP_DIRTYCONFIG:+dirtyconfig}"
      ;;
    list)
      # list
      space=""
      cd "$plugins" && for plugin in *; do printf "%s%s" "$space" "$plugin"; space=" "; done; echo ""
      ;;
    nodes)
      # list available nodes
      hostname
      echo "."
      ;;
    config*)
      # run plugin config
      case "$arg" in
        if_*)
          interface="${arg##if_}"
          config_if_ "$interface"
          if [ "$MUNIN_CAP_DIRTYCONFIG" = 1 ]; then
            fetch_if_ "$interface"
          fi
          ;;
        df|zfslist|cpu|load|memory|swap|processes|netstat|uptime)
          config_$arg
          if [ "$MUNIN_CAP_DIRTYCONFIG" = 1 ]; then
            fetch_$arg
          fi
          ;;
        *)
          if [ ! -f "$plugins/$arg" ]; then
            echo "# Unknown service"
            echo "."
            continue
          fi
          plugin="${arg%% *}"
          "$plugins/$plugin" config
          if [ "$MUNIN_CAP_DIRTYCONFIG" = 1 ]; then
            "$plugins/$plugin"
          fi
          echo "."
          ;;
      esac
      ;;
    fetch*)
      # fetch values
      case "$arg" in
        if_*)
          interface="${arg##if_}"
          config_if_ "$interface"
          ;;
        df|zfslist|cpu|load|memory|swap|processes|netstat|uptime)
            fetch_$arg
          ;;
        *)
          plugin="${arg%% *}"
          if [ ! -f "$plugins/$plugin" ]; then
            echo "# Unknown service"
            echo "."
            continue
          fi
          "$plugins/$plugin"
          ;;
      esac
      echo "."
      ;;
    version)
      echo "munin-node-sh on `hostname -s` version: $version"
      ;;
    quit)
      break
      ;;
    *)
      echo "# Unknown command. Try cap, list, nodes, config, fetch, version or quit"
      ;;
  esac
done

